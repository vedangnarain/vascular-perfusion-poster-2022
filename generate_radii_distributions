#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Tue Jun  1 18:23:28 2021

@author: Vedang Narain (vedang.narain@msdtc.ox.ac.uk)

Generate truncated normal and log normal distributions for hexagonal vessel radii.

The minimum is set by the radius of an RBC. The max. is set by the length of 
the vessels in the network.

Tested in Python 3.7.4.

Used to generate figure in Transfer Report.

"""

# Initialise libraries
import errno
import matplotlib.pyplot as plt
import numpy as np
import os, os.path
import scipy.stats as stats

# Set LaTex-style font
from pathlib import Path
import matplotlib
matplotlib.rcParams['mathtext.fontset'] = 'stix'
matplotlib.rcParams['font.family'] = 'STIXGeneral'
matplotlib.rcParams.update({'font.size': 11})

# Set the default mean, lower bound, upper bound, and number of vessels
mean = 12.5
lower_bound, upper_bound = 3, 37.5
n_vessels = 386

# Define a function to make a directory if needed
def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc: # Python >2.5
        if exc.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

# Define a function to safely open a directory to write a file
def safe_open_w(path):
    mkdir_p(os.path.dirname(path))
    return open(path, 'w')

# Define a function to generate a truncated distribution
def generate_truncated_normal_distribution(sigma, lower=lower_bound, upper=upper_bound, mu=mean, samples=n_vessels):
    
    # Generate a truncated normal distribution
    truncated_distribution = stats.truncnorm((lower - mu) / sigma, (upper - mu) / sigma, loc=mu, scale=sigma)

    # Draw samples for all the non-inlet/outlet vessel radii
    radii_list = truncated_distribution.rvs(samples)

    # Round off values to five decimal places
    radii_list = np.around(radii_list, decimals=5)

    # Return the list of radii
    return(radii_list)
    
# Define a function to add vessel IDs to the radii list    
def add_vessel_ids(radii_list, samples=n_vessels):
    
    # Generate vessel IDs
    vessel_ids = [x for x in range(11,samples+11)]
    
    # Add IDs to radii list
    radii_id_list = np.matrix.transpose(np.vstack([vessel_ids, radii_list]))
    
    return(radii_id_list)
    
# Define a function to generate a log normal distribution
def generate_log_normal_distribution(sigma, lower=lower_bound, upper=upper_bound, mu=mean, samples=n_vessels, add_ids=False):
    
    # Start a loop
    while True:
        
        # Convert the desired mean to log normal mean
        log_mu = (2*np.log(mu)) - (0.5*np.log((sigma**2)+(mu**2)))
#        print(log_mu)
        
        # Convert the desired SD to log normal SD
        log_sigma = np.sqrt((-2*np.log(mu)) + np.log((sigma**2)+(mu**2)))
#        print(log_sigma)
    
        # Draw samples for all the non-inlet/outlet vessel radii
        radii_list = np.random.lognormal(log_mu, log_sigma, samples)
        
        # Round off values to five decimal places
        radii_list = np.around(radii_list, decimals=5)
    
        # Break the loop only if the radii are within the right bounds
        if min(radii_list)>=lower and max(radii_list)<=upper:
            break
        
    # Add vessel IDs
    if add_ids==True:
        radii_list = add_vessel_ids(radii_list)
    
    # Return the list of radii
    return(radii_list)
    
# Specify the list of heterogeneities (standard deviations)
alpha_list = [5, 6, 7, 8]

#'''
# Set the figure layout
fig, axs = plt.subplots(nrows=2, ncols=2, sharex=True)
fig.subplots_adjust(hspace = 0.75, wspace=.25)
#plt.suptitle('Hexagonal Network Vessel Radius Distribution (μ = ' + str(mean) + ' μm, n_vessels = ' + str(n_vessels) + ', min = ' + str(lower_bound) + ' μm, max = ' + str(upper_bound) + ' μm)')

# Plot the stats for a solver
axs = axs.ravel()
for i in range(len(alpha_list)):
    distribution = generate_log_normal_distribution(alpha_list[i], add_ids=False)
    
    # write to file here (beta_i/selection_y). Actually make plot function inside and generate outside.
    n, bins, patches = axs[i].hist(x=distribution, bins='auto', alpha=0.7)
    if i==0 or i==2:
        axs[i].set_ylabel('number of vessels') 
    if i==2 or i==3:
        axs[i].set_xlabel('vessel radius (μm)')    
#    print(np.mean(distribution))
#    print(np.min(distribution), np.max(distribution))
#    axs[i].legend()
#    axs[i].grid()
    axs[i].title.set_text('${σ}$ = ' + str(alpha_list[i]) + ' μm')
    axs[i].tick_params(labelbottom=True)
    axs[i].axvline(12.5, c='black', ls='--', label='mean')
    axs[i].set_ylim(0, 75)
    if i==0:
        axs[i].legend()
plt.show()
#'''

#'''
# Write 100 radii lists for each alpha value
form = "%.5f \n"
for sigma_number in alpha_list:
    for list_number in range(1,101):
        id_name = '/home/narain/Chaste/projects/MicrovesselChaste/test/simulation/flow/100VesselLength/new_hexagonal_radius_log_normal_distribution/sigma_' + str(sigma_number) + '/id_list_' + str(list_number) + '.txt'
        radii_name = '/home/narain/Chaste/projects/MicrovesselChaste/test/simulation/flow/100VesselLength/new_hexagonal_radius_log_normal_distribution/sigma_' + str(sigma_number) + '/radii_list_' + str(list_number) + '.txt'
        composite_list = generate_log_normal_distribution(sigma_number, add_ids=True)  
        sorted_composite_list = composite_list[np.argsort(composite_list[:, 1])]
        sorted_id_list = sorted_composite_list[:,0]
        sorted_radii_list = sorted_composite_list[:,1]
        with safe_open_w(id_name) as i_f:
#            for i in range(len(radii_list)):
#                vector = 
            np.savetxt(id_name, sorted_id_list, fmt='%i')
        with safe_open_w(radii_name) as r_f:
#            for i in range(len(radii_list)):
#                vector = 
            np.savetxt(radii_name, sorted_radii_list, fmt='%1.5f')
            
# Save image
file_path = Path('/home/narain/Chaste/projects/MicrovesselChaste/test/simulation/flow/100VesselLength/new_hexagonal_radius_log_normal_distribution/hexagonal_radius_log_normal_distribution.svg').expanduser()
fig.savefig(file_path, dpi=500)
file_path = Path('/home/narain/Chaste/projects/MicrovesselChaste/test/simulation/flow/100VesselLength/new_hexagonal_radius_log_normal_distribution/hexagonal_radius_log_normal_distribution.png').expanduser()
fig.savefig(file_path, dpi=500)
#'''
                    