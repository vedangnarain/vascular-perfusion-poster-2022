#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Fri Feb  4 16:58:31 2022

@author: narain
  
Tested in Python 3.7.4.

Calculate Metrics of Hexagonal Network with log-normally distributed radii and
individual vessel pruning.

Used to generate figure in Transfer Report.

"""

# =============================================================================
# LIBRARIES & INITIALISATION
# =============================================================================

# Initialise libraries
#import matplotlib.colors as colors
import matplotlib.pyplot as plt
#from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import pandas as pd
import time

# Import tools for Paraview data
from get_paraview_data import *

# Starts stopwatch to clock execution time
start_time = time.time()

# Set LaTex-style font
from pathlib import Path
import matplotlib
matplotlib.rcParams['mathtext.fontset'] = 'stix'
matplotlib.rcParams['font.family'] = 'STIXGeneral'
matplotlib.rcParams.update({'font.size': 22})
# =============================================================================
# FUNCTIONS
# =============================================================================

# Define a function to read an O2 distribution .vti file and return the basic stats
def get_distribution_stats(solver_name, layout_selection, sigma, kills, hypoxic_threshold_list, plot=0, read=0):    
    
    # Set the file path
#    folder_path = '/home/narain/Desktop/Stochastic Pruning with 100 Trials/' + solver_name + 'Haematocrit/Lambda4/Alpha' + alpha_value + '/Beta' + beta + '/Trial' + trial
    folder_path = '/scratch/narain/Hexagonal/Log Normal Distribution/Individual Pruning in Hexagonal Network with 100 Selections/TestHexagonalNetwork/' + solver_name + 'Haematocrit/Sigma' + sigma + '/Selection' + layout_selection + '/Kills' + kills
    field_path =  folder_path + '/oxygen_solution_0.vti'    
    network_path = folder_path + '/FinalHaematocrit.vtp'

    # Print status update
    print(field_path)

    # Save file or read from existing file
    if read==0:    
        
        # Compute the architectural metrics
        n_vessels, mean_diameter, mean_geometric_resistance, diameter_adjacency_matrix, length_adjacency_matrix = get_hex_predictors(network_path, vessel_length_m, reference_node_coordinates)
        
        # Compute the O2 distribution
        field_data, field_spacing = get_vti_data(field_path)  # import the data for the network
        middle_field = get_hex_domain(field_data, field_spacing)  # get the distribution in the middle of the field (replace with designated file)
        
        # Plot the O2 distribution if desired
        if plot==1:  # plot the O2 distribution
            O2_field, _ = get_plottable_field(middle_field)  # get the O2 mesh for plots and stats
            fig = plt.figure()
            ax = plt.axes()
            colour_map = plt.cm.get_cmap('jet')
            plt.suptitle('O$_2$ distribution generated by the ' + solver_name + ' solver in the hexagonal vessel network with radii selection = ' + layout_selection + ' (σ = ' + sigma + ' and kills  = ' + kills + ' vessels (1 unit = ' + str(field_spacing [0]) + ' μm)')
            ref_map = ax.imshow(O2_field, cmap=colour_map, origin='lower')
            fig.colorbar(ref_map, ax=ax, label='nM')
            plt.show()
        flat_field = middle_field['oxygen'].to_numpy().flatten()
#        np.save('/home/narain/Temporary Python Files/Radius Threshold Pruning/' + solver_name + 'Haematocrit_Selection' + layout_selection + '_Sigma' + sigma + '_RadiusThreshold' + threshold + '_Distribution.npy', flat_field)
#    else:
#        flat_field = np.load('/home/narain/Temporary Python Files/Radius Threshold Pruning/' + solver_name + 'Haematocrit_Selection' + layout_selection + '_Sigma' + sigma + '_RadiusThreshold' + threshold + '_Distribution.npy')

    # Get the basic stats 
#    middle_O2_stats = pd.DataFrame(flat_field).describe()
            
    # Get the number of total points
    number_of_points = 1
    for dim in np.shape(flat_field): number_of_points *= dim

    # Calculate the number of points below the given hypoxic thresholds
    hypoxic_fraction_list = []
    for hypoxic_threshold in hypoxic_threshold_list:
        hypoxic_points = (flat_field < hypoxic_threshold).sum()
        hypoxic_fraction = hypoxic_points/number_of_points  # calculate the hypoxic fraction
#        print(hypoxic_threshold, hypoxic_points)
        hypoxic_fraction_list.append(hypoxic_fraction)

    # Return the stats
    return hypoxic_fraction_list, np.mean(flat_field), np.amin(flat_field), np.percentile(flat_field, 50), np.amax(flat_field), np.std(flat_field)

# Define function to compute the average of all layouts in a kills selection
def compute_average_kills(solver_name, sigma, kills, max_layouts, hypoxic_threshold_list, plot, read):
    
    # Create table to store all the kills data trials in an alpha group
    kills_table = np.array([])

    # Extract metrics from all trials and store in table
    for layout_selection in range(1, max_layouts+1):    
#        print(layout_selection)
        hypoxic_fraction_list, mean_value, min_value, half_value, max_value, std_value = get_distribution_stats(solver_name, str(layout_selection), sigma, str(kills), hypoxic_threshold_list, plot, read)
        table_entry = np.hstack([hypoxic_fraction_list, mean_value, min_value, half_value, max_value, std_value])
        kills_table = np.vstack([kills_table, table_entry]) if kills_table.size else table_entry

    # Return the hypoxic fractions, mean, min, 50%, max, and std for a kills averaged across all layouts
    return np.average(kills_table, axis=0)
#    return np.average(threshold_table[0]), np.average(threshold_table[1]), np.average(threshold_table[2]), np.average(threshold_table[3]), np.average(threshold_table[4])

# Define a function to return statistics for all the heterogeneities in the data
def get_solver_stats(solver_name, alpha_list, kills_list, max_layouts, hypoxic_threshold_list, plot, read):
#    table = np.array([])
    alpha_table = np.array([])
    for sigma in alpha_list:
        for kills in kills_list:    
            average_kills_data = compute_average_kills(solver_name, sigma, kills, max_layouts, hypoxic_threshold_list, plot, read)
            table_entry = np.hstack([float(sigma), float(kills), average_kills_data])
            alpha_table = np.vstack([alpha_table, table_entry]) if alpha_table.size else table_entry
    return alpha_table

# =============================================================================
# DISTRIBUTION STATS & HYPOXIC FRACTIONS
# =============================================================================

# Enter details to allow looping over folders
solver_list = ['Constant', 'Pries', 'Memory', 'Fung']
alpha_list = ['1', '2', '3', '4']
max_kills = 150
max_layouts = 100
kills_list = [str(x) for x in range(84, max_kills + 1)]
#hypoxic_threshold_list = [2195, 10000, 15000, 20000, 25000, 27441] 
#hypoxic_threshold_list = [2195, 5488, 10976, 16465, 21953, 27441] 
hypoxic_threshold_list = [2195, 27441] 
#hypoxic_threshold_list_pp = [0.8, 2, 4, 6, 8, 10] 

# Set vessel length (in metres)
vessel_length_m = 100*(10**-6)

# Get reference hexagonal network (all node coordinates are the same, regardless of heterogeneity)
reference_node_coordinates = get_reference_hexagonal_network(vessel_length_m)

# Set solver name
solver_name = solver_list[0]
'''
# Get the stats for all solvers (change to read=1 to extract from .vti files directly)
solver_stats = get_solver_stats(solver_name, alpha_list, kills_list, max_layouts, hypoxic_threshold_list, plot=0, read=0)

# Save array
np.save('/scratch/narain/Hexagonal/Log Normal Distribution/Individual Pruning in Hexagonal Network with 100 Selections/TestHexagonalNetwork/' + solver_name + 'Haematocrit/python_solver_data.npy', solver_stats)
#solver_stats = np.load('/scratch/narain/Hexagonal/Log Normal Distribution/Radius Threshold Pruning in Hexagonal Network with 100 Selections/TestHexagonalNetwork/' + solver_name + 'Haematocrit/python_solver_data.npy')

# Filter by alpha
mean_composite = np.array([])
min_composite = np.array([])
half_composite = np.array([])
max_composite = np.array([])
sd_composite = np.array([])
hypoxic_fraction_composite = np.array([])
for alpha_value in alpha_list:
    alpha_array = solver_stats[(solver_stats[:,0]==float(alpha_value))]
    hypoxic_fraction_data = alpha_array[:,2:-5]  # extract data between identifiers and basic stats (i.e., hypoxic fractions)
    mean_data = alpha_array[:,-5]
    min_data = alpha_array[:,-4]
    half_data = alpha_array[:,-3]
    max_data = alpha_array[:,-2]
    sd_data = alpha_array[:,-1]
    hypoxic_fraction_composite = np.vstack([hypoxic_fraction_composite, hypoxic_fraction_data]) if hypoxic_fraction_composite.size else hypoxic_fraction_data
    mean_composite = np.vstack([mean_composite, mean_data]) if mean_composite.size else mean_data
    min_composite = np.vstack([min_composite, min_data]) if min_composite.size else min_data
    half_composite = np.vstack([half_composite, half_data]) if half_composite.size else half_data
    max_composite = np.vstack([max_composite, max_data]) if max_composite.size else max_data
    sd_composite = np.vstack([sd_composite, sd_data]) if sd_composite.size else sd_data
'''
# =============================================================================
# PERFUSION QUOTIENTS
# =============================================================================

# Define a function to generate the data for a single alpha value
def get_alpha_line(alpha_group, max_beta):
    
    # Compute the averages for the betas in the alpha group
    pq_table = np.array([])
    alpha_kills_grouped = alpha_group.groupby(alpha_group.kills)
    for kills in range(1, max_kills+1):
        pq_table_entry = np.array([])
        alpha_kills_group = alpha_kills_grouped.get_group(kills)
        pq_table_entry = np.array([alpha_kills_group["alpha"].mean(), alpha_kills_group["kills"].mean(), alpha_kills_group["PQ"].mean()])
        pq_table = np.vstack([pq_table, pq_table_entry]) if pq_table.size else pq_table_entry
    
    # Plot the alpha data
#    ax.plot(pq_table[:,0], pq_table[:,1], pq_table[:,2])
    
    # Return the table for reference
    return pq_table

# Read PQ file
filename = '/home/narain/Desktop/Link to narain/Hexagonal/Log Normal Distribution/Individual Pruning in Hexagonal Network with 100 Selections/TestHexagonalNetwork/hex_lognormal_individual_perfusion_quotients.txt'
pq_df = pd.read_csv(filename, delim_whitespace=True, names=["network_name", "solver_name", "alpha", "selection", "kills", "PQ"])
#pq_df = pd.read_csv(filename, delim_whitespace=True, names=["alpha", "threshold", "PQ"], skiprows=1)

# Filter PQ data for multiple solvers
solver_filter = solver_name + 'Haematocrit'
pq_df = pq_df.loc[(pq_df["solver_name"] == solver_filter)]

# Drop extra data
#max_beta = 35
#pq_df = pq_df.loc[(pq_df["beta"] <= max_beta)]

# Separate by alpha 
alpha_grouped = pq_df.groupby(pq_df.alpha)
#alpha_0 = alpha_grouped.get_group(0)
alpha_1 = alpha_grouped.get_group(1)
alpha_2 = alpha_grouped.get_group(2)
alpha_3 = alpha_grouped.get_group(3)
alpha_4 = alpha_grouped.get_group(4)

# Compute average of all selections for PQ
line_1 = get_alpha_line(alpha_1, max_kills)
line_2 = get_alpha_line(alpha_2, max_kills)
line_3 = get_alpha_line(alpha_3, max_kills)
line_4 = get_alpha_line(alpha_4, max_kills)

# Combine the PQs
pq_composite = np.hstack([line_1, line_2, line_3 ,line_4])

# =============================================================================
# PLOTS
# =============================================================================

# Set the figure layout
fig, axs = plt.subplots(3, len(alpha_list), figsize=(20, 12), tight_layout = {'pad': 2})
fig.subplots_adjust(hspace = .5, wspace=.25)
linestyles = ['solid', 'dashed', 'dotted', 'dashdot', (0,(5,10)), (0, (3, 1, 1, 1, 1, 1))]
linecolours = ['#1f77b4','b','b','b','b', 'r']
linelegends = ['anoxia', 2, 4, 6, 8, 'hypoxia']
#plt.suptitle(solver_name + ' haematocrit solver in the heterogeneous hexagonal vessel network with radius threshold pruning')

# Plot the distribution stats for a solver
axs = axs.ravel()
for i in range(len(alpha_list)):
    axs[i].set_ylim([0,30000])
#    axs[i].plot(alpha_array[:,1], mean_composite[i], ls='dashed', label='mean')
#    axs[i].plot(alpha_array[:,1], min_composite[i], ls='dotted', label='min')
##    axs[i].plot(alpha_array[:,1], half_composite[i], ls=(0, (3, 5, 1, 5)), label='50%')
#    axs[i].plot(alpha_array[:,1], max_composite[i], ls='dashdot', label='max')
#    axs[i].plot(alpha_array[:,1], sd_composite[i], ls='solid', label='SD')
#    axs[i].ticklabel_format(axis="y", style="sci", scilimits=(0,0))
#    axs[i].set_xlabel('radius threshold (μm)')    
    if i==0:
        axs[i].set_ylabel('oxygen (nM)') 
        axs[i].legend(loc="best", prop={'size': 15})
    axs[i].set_xlim(0)
#    axs[i].set_ylim(0)
    axs[i].grid()
    axs[i].title.set_text('${σ}$ = ' + alpha_list[i])

# Plot the PQ for a solver
for i in range(len(alpha_list),len(alpha_list)*2):
    axs[i].set_ylim([0,1.1])  # set PQ limits
    axs[i].plot(line_1[:,1], pq_composite[:, (3*i)-10], label='PQ')
#    axs[i].set_xlabel('radius threshold (μm)')    
    if i==len(alpha_list):
        axs[i].set_ylabel('PQ') 
    axs[i].set_xlim(0)
    axs[i].set_ylim(0)
#    axs[i].legend()
    axs[i].grid()

# Plot the HF for a solver
for i in range(len(alpha_list*2),len(alpha_list)*3):
    offset = i-len(alpha_list*2)
    for threshold_index in range(len(hypoxic_threshold_list)):  # plot a line for each threshold
        if threshold_index==0 or threshold_index==5:
            axs[i].plot(alpha_array[:,1], hypoxic_fraction_composite[offset*len(kills_list):(offset+1)*len(kills_list), threshold_index], label=linelegends[threshold_index], ls=linestyles[threshold_index], c=linecolours[threshold_index])
        if i==len(alpha_list*2):
            axs[i].set_ylabel('HF/AF') 
            axs[i].legend(loc="best", prop={'size': 15})
        axs[i].set_xlabel('kills (vessels)')    
        axs[i].set_xlim(0)
        axs[i].set_ylim([0,1.1])  # set HF limits
        axs[i].grid(b=True)

# Show plots
plt.show()

# Save image
file_path = Path('~/Desktop/Final Figures/' + solver_name + '_lognormal_hexagonal_individual_pruning.svg').expanduser()
fig.savefig(file_path, dpi=500, bbox_inches = 'tight')
file_path = Path('~/Desktop/Final Figures/' + solver_name + '_lognormal_hexagonal_individual_pruning.png').expanduser()
fig.savefig(file_path, dpi=500, bbox_inches = 'tight')

# Prints execution time
print("\n--- Execution Time: %s seconds ---" % (time.time() - start_time))
