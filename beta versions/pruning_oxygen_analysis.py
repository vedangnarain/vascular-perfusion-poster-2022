#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Created on Mon Feb  8 12:38:32 2021

@author: Vedang Narain (vedang.narain@msdtc.ox.ac.uk)

TestElementaryNetwork Analysis

This is a comparison of O2 distributions generated by various pruned architectures. 
The input is the oxygen distribution of the simulations from Paraview and the 
outputs are (1) spatial oxygen plots (2) histograms of the O2 distributions.

Tested in Python 3.7.4.

"""

# =============================================================================
# LIBRARIES & INITIALISATION
# =============================================================================

# Initialise libraries
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import scipy
import time

# Starts stopwatch to clock execution time
start_time = time.time()

# =============================================================================
# DATA
# =============================================================================

# Import the data (pruned vessels numbered by quadrant)
line_no_pruning = pd.read_csv('/Users/vedang/Simulations/TestElementaryNetwork/LineSource2D/Oxygen Field/no_pruning.txt', usecols=[0, 1, 3])
line_upper_path = pd.read_csv('/Users/vedang/Simulations/TestElementaryNetwork/LineSource2D/Oxygen Field/lower_pruning.txt', usecols=[0, 1, 3])
line_lower_path = pd.read_csv('/Users/vedang/Simulations/TestElementaryNetwork/LineSource2D/Oxygen Field/upper_pruning.txt', usecols=[0, 1, 3])
flow_no_pruning = pd.read_csv('/Users/vedang/Simulations/TestElementaryNetwork/WithFlow2D/Oxygen Field/no_pruning.txt', usecols=[0, 1, 3])
flow_upper_path = pd.read_csv('/Users/vedang/Simulations/TestElementaryNetwork/WithFlow2D/Oxygen Field/lower_pruning.txt', usecols=[0, 1, 3])
flow_lower_path = pd.read_csv('/Users/vedang/Simulations/TestElementaryNetwork/WithFlow2D/Oxygen Field/upper_pruning.txt', usecols=[0, 1, 3])

# =============================================================================
# PLOTS
# =============================================================================

# Define a function to plot a field and return basic stats  
def plot_field(paraview_data):
    
    paraview_data = paraview_data.astype('float32')
    
    # Generates pair plots
    #sns.pairplot(dataset[['x', 'y', 'conc']], diag_kind="kde")
    
    # Calculate concentration statistics
    O2_stats = paraview_data['oxygen'].describe()
    
    # Downsample data if needed
    paraview_data = paraview_data[::int(1)]
    
    # Convert dataframe into NumPy matrix
    mat = paraview_data.to_numpy()
    
    # Get the x and y axes
    x = np.unique(mat[:,0])
    y = np.unique(mat[:,1])
    
    # Create a mesh from the x and y axes 
    X,Y = np.meshgrid(x, y)
    
    # Interpolate the concentration values over the mesh
    Z = scipy.interpolate.griddata((mat[:,0], mat[:,1]), mat[:,2], (X,Y), method='nearest')
    
    '''    
    # Plot the data
    fig = plt.figure()
    ax = fig.gca()
    surf = ax.pcolormesh(X,Y,Z)
    fig.colorbar(surf)
    
    colors = ["#eaa941", "#efef39", "#53a447", "#3b387f", "#48a2ba"]
    cmap = matplotlib.colors.ListedColormap(colors)
    cmap.set_under("crimson")
    cmap.set_over("w")
    '''
    
    '''
    fig, ax = plt.subplots()
    im = ax.pcolormesh(X,Y,Z,cmap=cmap,vmin=18825)
    
    fig.colorbar(im, extend="both")
    
    plt.show()
    '''

    # Set the threshold for hypoxia
#    hypoxic = 14434.5 #O2_stats['25%'] # set hypoxia threshold
    
    # Plot the data with discrete sections
    plt.figure()
    plt.imshow(Z, cmap=plt.cm.get_cmap('jet', 20))
    plt.colorbar()
    
    # Assign the labels
    plt.title('O$_2$ Concentration (nM?)')
    plt.xlabel('μm')
    plt.ylabel('μm')
    plt.show()
    
    # Return the oxygen stats
    return O2_stats

# Set the number of bins 
num_bins = 50


# Plot the no-pruning field and histogram
line_no_pruning_O2_stats = plot_field(line_no_pruning)
flow_no_pruning_O2_stats = plot_field(flow_no_pruning)

# Plot the 3-4 network field and histogram
line_upper_path_O2_stats = plot_field(line_upper_path)
flow_upper_path_O2_stats = plot_field(flow_upper_path)

# Plot the 1-2 network field and histogram
line_lower_path_O2_stats = plot_field(line_lower_path)
flow_lower_path_path_O2_stats = plot_field(flow_lower_path)

#colors = ['red', 'tan', 'lime']
#ax0.hist(x, n_bins, density=True, histtype='bar', color=colors, label=colors)
#ax0.legend(prop={'size': 10})
#ax0.set_title('bars with legend')

# Set legends for 
type_legend = ['line', 'flow']
network_legend = ['unpruned', 'upper', 'lower']

# Plot unpruned comparative histogram
plt.figure()
plt.style.use('fivethirtyeight')
plt.title('Unpruned Network')
plt.hist([line_no_pruning['oxygen'], flow_no_pruning['oxygen']], num_bins, label=type_legend)
plt.xlabel('O$_2$ Concentration (nM)')
plt.ylabel('Point Count')
plt.legend()
plt.show()

# Plot unpruned comparative histogram
plt.figure()
plt.style.use('fivethirtyeight')
plt.title('Upper Path Network')
plt.hist([line_upper_path['oxygen'], flow_upper_path['oxygen']], num_bins, label=type_legend)
plt.xlabel('O$_2$ Concentration (nM)')
plt.ylabel('Point Count')
plt.legend()
plt.show()

# Plot unpruned comparative histogram
plt.figure()
plt.style.use('fivethirtyeight')
plt.title('Lower Path Network')
plt.hist([line_lower_path['oxygen'], flow_lower_path['oxygen']], num_bins, label=type_legend)
plt.xlabel('O$_2$ Concentration (nM)')
plt.ylabel('Point Count')
plt.legend()
plt.show()

# Plot all line source network histograms together
plt.figure()
plt.style.use('fivethirtyeight')
plt.title('Line Source Network')
plt.hist([line_no_pruning['oxygen'], line_upper_path['oxygen'], line_lower_path['oxygen']], num_bins, label=network_legend)
plt.xlabel('O$_2$ Concentration (nM)')
plt.ylabel('Point Count')
plt.legend()
plt.show()

# Plot all flowing network histograms together
plt.figure()
plt.style.use('fivethirtyeight')
plt.title('Flowing Network')
plt.hist([flow_no_pruning['oxygen'], flow_upper_path['oxygen'], flow_lower_path['oxygen']], num_bins, label=network_legend)
plt.xlabel('O$_2$ Concentration (nM)')
plt.ylabel('Point Count')
plt.legend()
plt.show()

# prints execution time
print("\n--- Execution Time: %s seconds ---" % (time.time() - start_time))
